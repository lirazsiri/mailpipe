#!/usr/bin/python
"""
Invoke an action from a parsed mail reply. Useful for handling a reply
to an automatic notification from a website (for example).

Options:
    --debug                           Debug mail parsing
    --mail-error                      Mail action errors back to sender
    --bodyfilter-rst2html             Pass body through a rst2html filter

    --quoted-firstline-re='REGEXP'    Regexp for first line of quoted text
                                      Default: $DEFAULT_QUOTED_FIRSTLINE_RE

    --quoted-actiontoken-re='REGEXP'  Regexp for action token in qouted text
                                      Default: $DEFAULT_QUOTED_ACTIONTOKEN_RE

Action API:
    
    (echo title; cat body) | action action_path sender_email

"""
import os
import sys
import getopt

import re
from docutils import core, utils
import string

from commands import mkarg
from popen2 import Popen4
from subprocess import Popen, PIPE

import email
from email.mime.text import MIMEText

from StringIO import StringIO
import traceback

DEFAULT_QUOTED_FIRSTLINE_RE = r'\| Your subscription'
DEFAULT_QUOTED_ACTIONTOKEN_RE = r'https?://\S*?/([_\w\d\#\/\-]+)\s'

class Error(Exception):
    pass

def rst2html(input_string, initial_header_level=2):
    overrides = {'initial_header_level': initial_header_level,
                 'halt_level': 2 }
    try:
        parts = core.publish_parts(source=input_string, writer_name='html',
                                   settings_overrides=overrides) 
    except utils.SystemMessage, e:
        raise Error(str(e))

    return parts['body']

def get_sender_address(msg):
    sender_address = msg['from']
    m = re.search(r'<(.*)>', sender_address)
    if m:
        sender_address = m.group(1)

    def filter_legal(s):
        return re.sub(r'[^\w\d\.\-@+_]', '', s)

    return filter_legal(sender_address)

def get_title(msg):
    title = msg['subject']

    m = re.match(r'^(.*)[\s\(]Re:', title, re.IGNORECASE | re.DOTALL)
    if m:
        title = m.group(1).strip()

    return title
    
def split_body(body, quoted_firstline_re):
    """split body into reply and original quoted text"""
    def find_line(lines, pattern):
        pattern = re.compile(pattern)
        for i, line in enumerate(lines):
            if pattern.match(line):
                return i


    lines = body.splitlines()

    linenum = find_line(lines, '^.\s*' + quoted_firstline_re)
    if linenum < 0:
        raise Error("can't match quoted firstline /%s/" % quoted_firstline_re)

    def rejoin(lines):
        return "\n".join(lines).strip()
    return rejoin(lines[:linenum-1]), rejoin(lines[linenum-1:])

def get_action_token(quoted, quoted_actiontoken_re):
    m = re.search(quoted_actiontoken_re, quoted) 
    if not m:
        raise Error("couldn't match regexp for quoted action token /%s/" % quoted_actiontoken_re)

    return m.group(1)

def usage(e=None):
    if e:
        print >> sys.stderr, "error: " + str(e)

    print >> sys.stderr, "Usage: cat mail.eml | %s [-options]" % sys.argv[0]
    tpl = string.Template(__doc__.strip()).substitute(DEFAULT_QUOTED_FIRSTLINE_RE=DEFAULT_QUOTED_FIRSTLINE_RE, 
                                                      DEFAULT_QUOTED_ACTIONTOKEN_RE=DEFAULT_QUOTED_ACTIONTOKEN_RE)
    print >> sys.stderr, tpl

    sys.exit(1)

def sendmail(sender, recipient, subject, body):
    email = MIMEText(body)
    email['From'] = sender
    email['To'] = recipient
    email['Subject'] = subject

    Popen("sendmail -t", shell=True, stdin=PIPE).communicate(str(email))

def main():
    opt_debug = False
    opt_mailerror = False
    opt_bodyfilter_rst2html = False
    opt_quoted_firstline_re = DEFAULT_QUOTED_FIRSTLINE_RE
    opt_quoted_actiontoken_re = DEFAULT_QUOTED_ACTIONTOKEN_RE

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], 'h', 
                                       [ 'quoted-firstline-re=',
                                         'quoted-actiontoken-re=',
                                         'bodyfilter-rst2html',
                                         'mail-error',
                                         'debug'
                                       ])
                                       
    except getopt.GetoptError, e:
        usage(e)

    if not args:
        usage()

    if len(args) != 1:
        usage("too many arguments")

    action_command = args[0]

    for opt, val in opts:
        if opt == '-h':
            usage()

        if opt == '--debug':
            opt_debug = True

        if opt == '--mail-error':
            opt_mailerror = True

        if opt == '--bodyfilter-rst2html':
            opt_bodyfilter_rst2html = True

        if opt == '--quoted-firstline-re':
            opt_quoted_firstline_re = val

        if opt == '--quoted-actiontoken-re':
            opt_quoted_actiontoken_re = val

    msg = email.message_from_string(sys.stdin.read())
    sender_address = get_sender_address(msg)

    title = get_title(msg)

    try:
        reply, quoted = split_body(msg.get_payload(), opt_quoted_firstline_re)
        action_token = get_action_token(quoted, opt_quoted_actiontoken_re)

        if opt_bodyfilter_rst2html:
            reply = rst2html(reply)

        command = action_command + " %s %s" % (mkarg(action_token), mkarg(sender_address))
        if opt_debug:
            print "COMMAND: " + command
            print "TITLE: " + title
            print
            print reply
            return

        child = Popen4(command)
        print >> child.tochild, title
        print >> child.tochild, reply
        child.tochild.close()

        command_output = child.fromchild.read()
        error = child.wait()

        if error != 0:
            raise Error("non-zero exitcode (%s) for command: %s\n\n%s" % 
                        (os.WEXITSTATUS(error), command, command_output))

    except Exception, e:
        if not opt_mailerror:
            raise

        sio = StringIO()
        traceback.print_exc(file=sio)

        sendmail(msg['to'], msg['from'], 
                 'Error handling reply: ' + msg['subject'],
                 sio.getvalue())

if __name__ == "__main__":
    main()
